#!/usr/bin/bash
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Remove locale settings to eliminate localized outputs where possible
export LC_ALL=C
unset LANG

export MK_LIBDIR="/usr/lib/check_mk_agent"
export MK_CONFDIR="/etc/check_mk"
export MK_VARDIR="/var/lib/check_mk_agent"

export PATH=$PATH:/opt/csw/bin

# All executables in PLUGINSDIR will simply be executed and their
# ouput appended to the output of the agent. Plugins define their own
# sections and must output headers with '<<<' and '>>>'
PLUGINSDIR=$MK_LIBDIR/plugins

# All executables in LOCALDIR will by executabled and their
# output inserted into the section <<<local>>>. Please refer
# to online documentation for details.
LOCALDIR=$MK_LIBDIR/local

# close standard input (for security reasons) and stderr
if [ "$1" = -d ]
then
    set -xv
else
    exec <&- 2>/dev/null
fi

function file_age() {
    /usr/bin/perl -e 'if (! -f $ARGV[0]){die "0000000"};$mtime=(stat($ARGV[0]))[9];print ($^T-$mtime);' "$1"
}


# Runs a command asynchronous by use of a cache file
function run_cached () {
    local section=""
    if [ "$1" = -s ] ; then section="echo '<<<$2>>>' ; " ; shift ; fi
    local NAME=$1
    local MAXAGE=$2
    shift 2
    local CMDLINE="$section$@"

    if [ ! -d $MK_VARDIR/cache ]; then mkdir -p $MK_VARDIR/cache ; fi
    CACHEFILE="$MK_VARDIR/cache/$NAME.cache"

    # Check if the creation of the cache takes suspiciously long and return
    # nothing if the age (access time) of $CACHEFILE.new is twice the MAXAGE
    if [ -e "$CACHEFILE.new" ] ; then
        AGE=$(file_age "$CACHEFILE.new")
        if [ $AGE -ge $((MAXAGE * 2)) ] ; then
            return
        fi
    fi

    # Check if cache file exists and is recent enough
    if [ -s "$CACHEFILE" ] ; then
        AGE=$(file_age "$CACHEFILE")
        if [ $AGE -le $MAXAGE ] ; then local USE_CACHEFILE=1 ; fi
        # Output the file in any case, even if it is
        # outdated. The new file will not yet be available
        cat "$CACHEFILE"
    fi

    # Cache file outdated and new job not yet running? Start it
    if [ -z "$USE_CACHEFILE" -a ! -e "$CACHEFILE.new" ] ; then
        echo "set -o noclobber ; exec > $CACHEFILE.new || exit 1 ; $CMDLINE && mv $CACHEFILE.new $CACHEFILE || rm -f $CACHEFILE $CACHEFILE.new" | nohup bash 2>/dev/null &
    fi
}


echo '<<<check_mk>>>'
echo Version: 1.2.6p15
echo AgentOS: solaris


# Find out what zone we are running in
# Treat all pre-Solaris 10 systems as "global"
if type zonename &>/dev/null
then
    zonename=$(zonename)
    pszone="-z $zonename"
else
    zonename="global"
    pszone="-A"
fi


# Get statistics about monitored jobs. Below the job directory there
# is a sub directory per user that ran a job. That directory must be
# owned by the user so that a symlink or hardlink attack for reading
# arbitrary files can be avoided.
if pushd $MK_VARDIR/job >/dev/null; then
    echo '<<<job>>>'
    for username in *
    do
        if [ -d "$username" ] && cd "$username" ; then
            count=$(su "$username" -c "ls -1 * | wc -l")

            if [ "$count" -eq "1" ]; then
                filename=$(su "$username" -c "ls -1 *")
                echo "==> $filename <=="
            fi

            su "$username" -c "head -n1000 *"
            cd ..
        fi
    done
    popd > /dev/null
fi




# Filesystem usage for UFS and VXFS
echo '<<<df>>>'
for fs in ufs vxfs samfs lofs
do
    df -l -k -F $fs 2>/dev/null | sed 1d | \
    while read Filesystem kbytes used avail capacity Mountedon
    do
        kbytes=$(($used + $avail))
        echo "$Filesystem $fs $kbytes $used $avail $capacity $Mountedon"
    done
done

# Filesystem usage for ZFS
if type zfs &>/dev/null
then
    echo '<<<zfsget>>>'
    echo '[zfs]'
    zfs get -Hp name,quota,used,avail,mountpoint,type -t filesystem,volume 2>/dev/null || \
       zfs get -Hp name,quota,used,avail,mountpoint,type
    echo '[df]'
    df -l -k -F zfs 2>/dev/null | sed 1d
fi

# ZFS arc cache
if type mdb >/dev/null 2>&1
then
    echo '<<<zfs_arc_cache>>>'
    echo "::arc" | mdb -k
fi

# Processes
echo '<<<ps>>>'
ps -o user,vsz,rss,pcpu,args $pszone | \
sed -e 1d -e 's/ *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) */(\1,\2,\3,\4) /'

if type statgrab &>/dev/null
then
    statgrab_sections=(const. cpu. disk. general. mem. page. swap. user.)
    checkmk_sections=(cpu disk page)

    # Only collect net stats in global zone.
    if [ "$zonename" == "global" ]
    then
        statgrab_sections+=(net.)
        checkmk_sections+=(net)
    fi

    if [ ! -x /usr/bin/top ]; then
        checkmk_sections+=(mem)
    fi

    for sect in ${checkmk_sections[@]}; do
        echo "<<<statgrab_${sect}>>>"
        case "${sect}" in
          # Il check della memoria ha bisogno di DUE sezioni di statgrab
	  "mem") 
              run_cached "statgrab" 120 "statgrab ${statgrab_sections[@]} 2>/dev/null" 2>&1 | egrep "^(swap|mem)\." | sed "s/ *= */ /";;
          # Per tutti gli altri check, vale l'equivalenza sezione = info per il check
          *)
              run_cached "statgrab" 120 "statgrab ${statgrab_sections[@]} 2>/dev/null" 2>&1 | grep "^${sect}" | sed "s/${sect}\.//; s/ *= */ /";;
        esac
    done
fi


# /proc/cpu
# Simulated Output of Linux /proc/cpu
echo '<<<cpu>>>'
load=$(uptime|sed -e 's;.*average: \([0-9]\{1,\}\.[0-9]\{1,\}\), \([0-9]\{1,\}\.[0-9]\{1,\}\), \([0-9]\{1,\}\.[0-9]\{1,\}\).*;\1 \2 \3;')
ps=$(($(ps -o comm $pszone | wc -l)))
procs=$(($(psrinfo | wc -l)))
echo $load 1/$ps $$ $procs


# zpool status
if [ -x /sbin/zpool ]; then
    run_cached -s zpool_status 120 "/sbin/zpool status -x"
fi


# /proc/uptime
# Simulated output of Linux /proc/uptime
echo '<<<uptime>>>'
ctime=`nawk 'BEGIN{print srand()}'`;
btime=`kstat '-p' 'unix:::boot_time' 2>&1|grep 'boot_time'|awk '{print $2}'`;
echo $(($ctime - $btime));


# NTP
ps -o comm $pszone | grep -w .*ntpd &>/dev/null
if [ $? -eq 0 ]
then
    echo '<<<ntp>>>'
    ntpq -np | sed -e 1,2d -e 's/^\(.\)/\1 /' -e 's/^ /%/'
fi


# Memory
if [ -x /usr/bin/top ]
then
    echo "<<<solaris_mem>>>"
    /usr/bin/top | grep '^Memory:'
fi


# TCP Connection stats
echo '<<<tcp_conn_stats>>>'
netstat -n -a -f inet -P tcp | tail  +5 | \
nawk '{ c[$7]++; } END { for (x in c) { print x, c[x]; } }'


# Multipathing
if type mpathadm &>/dev/null
then
    if [ "$zonename" == "global" ]
    then
        run_cached solaris_multipath 120 "mpathadm list LU" | \
	   nawk 'BEGIN { print "<<<solaris_multipath>>>" } 
	   {
           if(NR%3==1){dev=$1}
           if(NR%3==2){tc=$NF}
           if(NR%3==0){printf "%s %s %s\n",dev,tc,$NF}
	   }'
    fi
fi


# Fileinfo-Check: put patterns for files into $MK_CONFDIR/fileinfo.cfg
if [ -f "$MK_CONFDIR/fileinfo.cfg" ]
then
    echo '<<<fileinfo:sep(124)>>>'
    /usr/bin/perl -e 'print time."\n"'
    for file in $(cat "$MK_CONFDIR/fileinfo.cfg")
    do
        ls $file > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            ls $file | sort -u | \
                /usr/bin/perl -e '
                    while(my $file = <>) {
                        $file =~ s/\n$//;
                        ($device, $inode, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blksize, $blocks) = stat($file);
                        print("$file|$size|$mtime\n");
                    }'
        else
            echo "$file|missing|$(/usr/bin/perl -e 'print time')"
        fi
    done
fi

# Libelle Business Shadow
if type trd >/dev/null 2>&1
then
    echo '<<<libelle_business_shadow:sep(58)>>>'
    trd -s
fi


# MK's Remote Plugin Executor
if test -f "$MK_CONFDIR/mrpe.cfg"
then
    echo '<<<mrpe>>>'
    grep -v '^ *#' "$MK_CONFDIR/mrpe.cfg" | grep -v '^ *$' | \
    while read descr cmdline
    do
        OUTPUT=$($cmdline)
        echo "$descr $? $OUTPUT"
    done
fi

# Local checks
if cd $LOCALDIR 2>/dev/null
then
    echo '<<<local>>>'
    for skript in $(ls)
    do
        if [ -x "$skript" ] ; then
            ./$skript
        fi
    done

    # Call some plugins only every X'th second
    for skript in [1-9]*/* ; do
        if [ -x "$skript" ] ; then
            run_cached local_${skript//\//\#} ${skript%/*} "$skript"
        fi
    done

fi

# Plugins
if cd $PLUGINSDIR 2>/dev/null
then
    for skript in $(ls)
    do
        if [ -x "$skript" ] ; then
            ./$skript
        fi
    done

    # Call some plugins only every X'th second
    for skript in [1-9]*/* ; do
        if [ -x "$skript" ] ; then
            run_cached plugins_${skript//\//\#} ${skript%/*} "$skript"
        fi
    done
fi

